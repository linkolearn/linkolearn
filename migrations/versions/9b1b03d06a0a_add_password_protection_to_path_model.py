from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '9b1b03d06a0a'
down_revision = 'bfd20296e16e'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('bookmark_lists', schema=None) as batch_op:
        # Drop the existing path_id column
        batch_op.drop_column('path_id')
        # Add the path_id column back
        batch_op.add_column(sa.Column('path_id', sa.Integer(), nullable=True))

        # Manually create the foreign key constraint with a name
        batch_op.create_foreign_key('bookmark_lists_path_id_fkey', 'paths', ['path_id'], ['id'], ondelete='CASCADE')

    with op.batch_alter_table('paths', schema=None) as batch_op:
        batch_op.add_column(sa.Column('_password', sa.String(length=128), nullable=True))
        batch_op.add_column(sa.Column('is_password_protected', sa.Boolean(), nullable=True))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('paths', schema=None) as batch_op:
        batch_op.drop_column('is_password_protected')
        batch_op.drop_column('_password')

    with op.batch_alter_table('bookmark_lists', schema=None) as batch_op:
        # Drop the path_id column and recreate it as necessary
        batch_op.drop_column('path_id')
        batch_op.add_column(sa.Column('path_id', sa.Integer(), nullable=False))

        # Recreate the foreign key constraint (if needed) with a name
        batch_op.create_foreign_key('bookmark_lists_path_id_fkey', 'paths', ['path_id'], ['id'])

    # ### end Alembic commands ###
